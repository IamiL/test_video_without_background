const http = require('http');
const fs = require('fs');
const path = require('path');

// –£—Ç–∏–ª–∏—Ç—ã –¥–ª—è –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
const getTimestamp = () => new Date().toISOString();
const getClientInfo = (req) => {
    return {
        ip: req.connection.remoteAddress || req.socket.remoteAddress ||
                (req.connection.socket ? req.connection.socket.remoteAddress : null),
        userAgent: req.headers['user-agent'] || 'Unknown',
        referer: req.headers.referer || 'Direct',
        acceptLanguage: req.headers['accept-language'] || 'Unknown'
    };
};

const formatFileSize = (bytes) => {
    if (bytes === 0) return '0 B';
    const k = 1024;
    const sizes = ['B', 'KB', 'MB', 'GB'];
    const i = Math.floor(Math.log(bytes) / Math.log(k));
    return parseFloat((bytes / Math.pow(k, i)).toFixed(2)) + ' ' + sizes[i];
};

const logRequest = (req, status, filePath, error = null, fileSize = null) => {
    const client = getClientInfo(req);
    const timestamp = getTimestamp();

    console.log(`\n${'='.repeat(80)}`);
    console.log(`[${timestamp}] REQUEST DETAILS`);
    console.log(`${'='.repeat(80)}`);
    console.log(`üåê URL: ${req.method} ${req.url}`);
    console.log(`üìç Client IP: ${client.ip}`);
    console.log(`üñ•Ô∏è  User Agent: ${client.userAgent}`);
    console.log(`üîó Referer: ${client.referer}`);
    console.log(`üåç Accept-Language: ${client.acceptLanguage}`);
    console.log(`üìÅ File Path: ${filePath}`);

    if (fileSize !== null) {
        console.log(`üìä File Size: ${formatFileSize(fileSize)}`);
    }

    console.log(`üìã Headers:`);
    Object.keys(req.headers).forEach(key => {
        console.log(`   ${key}: ${req.headers[key]}`);
    });

    if (status >= 200 && status < 300) {
        console.log(`‚úÖ Status: ${status} - SUCCESS`);
    } else if (status >= 300 && status < 400) {
        console.log(`‚Ü©Ô∏è  Status: ${status} - REDIRECT`);
    } else if (status >= 400 && status < 500) {
        console.log(`‚ö†Ô∏è  Status: ${status} - CLIENT ERROR`);
    } else if (status >= 500) {
        console.log(`‚ùå Status: ${status} - SERVER ERROR`);
    }

    if (error) {
        console.log(`üí• Error Details:`);
        console.log(`   Code: ${error.code || 'Unknown'}`);
        console.log(`   Message: ${error.message || 'Unknown error'}`);
        console.log(`   Stack: ${error.stack || 'No stack trace'}`);
    }

    console.log(`${'='.repeat(80)}\n`);
};

const PORT = 3000;
const DIST_DIR = path.join(__dirname, 'dist');
const PUBLIC_DIR = path.join(__dirname, 'public');

// MIME —Ç–∏–ø—ã –¥–ª—è —Ä–∞–∑–Ω—ã—Ö —Ñ–∞–π–ª–æ–≤
const mimeTypes = {
    '.html': 'text/html',
    '.js': 'text/javascript',
    '.css': 'text/css',
    '.json': 'application/json',
    '.png': 'image/png',
    '.jpg': 'image/jpg',
    '.jpeg': 'image/jpeg',
    '.gif': 'image/gif',
    '.svg': 'image/svg+xml',
    '.webm': 'video/webm',
    '.mp4': 'video/mp4',
    '.mov': 'video/quicktime',
    '.ico': 'image/x-icon',
    '.woff': 'font/woff',
    '.woff2': 'font/woff2',
    '.ttf': 'font/ttf'
};

const server = http.createServer((req, res) => {
    const requestStartTime = Date.now();
    const timestamp = getTimestamp();

    console.log(`\nüöÄ [${timestamp}] Incoming request: ${req.method} ${req.url}`);

    // –ü–æ–ª—É—á–∞–µ–º –ø—É—Ç—å –∏–∑ URL
    let filePath;

    // –°–Ω–∞—á–∞–ª–∞ –ø—Ä–æ–≤–µ—Ä—è–µ–º –≤ –ø–∞–ø–∫–µ dist (—Å–∫–æ–º–ø–∏–ª–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ —Ñ–∞–π–ª—ã)
    if (req.url === '/') {
        filePath = path.join(DIST_DIR, 'index.html');
        console.log(`üìÇ Root request, serving index.html from: ${filePath}`);
    } else {
        // –î–ª—è —Å—Ç–∞—Ç–∏—á–µ—Å–∫–∏—Ö —Ñ–∞–π–ª–æ–≤ —Å–Ω–∞—á–∞–ª–∞ –ø—Ä–æ–≤–µ—Ä—è–µ–º public, –ø–æ—Ç–æ–º dist
        const publicPath = path.join(PUBLIC_DIR, req.url);
        const distPath = path.join(DIST_DIR, req.url);

        console.log(`üîç Checking file existence:`);
        console.log(`   Public path: ${publicPath}`);
        console.log(`   Dist path: ${distPath}`);

        // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ –≤ public –ø–∞–ø–∫–µ
        if (fs.existsSync(publicPath)) {
            filePath = publicPath;
            console.log(`‚úÖ Found in public directory: ${filePath}`);
        } else {
            filePath = distPath;
            console.log(`‚û°Ô∏è  Will try dist directory: ${filePath}`);
        }
    }

    // –ü–æ–ª—É—á–∞–µ–º —Ä–∞—Å—à–∏—Ä–µ–Ω–∏–µ —Ñ–∞–π–ª–∞
    const extname = path.extname(filePath).toLowerCase();
    console.log(`üìÑ File extension: ${extname || 'no extension'}`);

    // –û–ø—Ä–µ–¥–µ–ª—è–µ–º MIME —Ç–∏–ø
    const contentType = mimeTypes[extname] || 'application/octet-stream';
    console.log(`üé≠ MIME type: ${contentType}`);

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ —Ñ–∞–π–ª–∞
    fs.access(filePath, fs.constants.F_OK, (err) => {
        if (err) {
            console.log(`‚ùå File access error: ${err.message}`);

            // –ï—Å–ª–∏ —Ñ–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω, –ø—ã—Ç–∞–µ–º—Å—è –æ—Ç–¥–∞—Ç—å index.html (–¥–ª—è SPA)
            if (extname === '' || extname === '.html') {
                const fallbackPath = path.join(DIST_DIR, 'index.html');
                console.log(`üîÑ Trying fallback to index.html: ${fallbackPath}`);
                filePath = fallbackPath;
            } else {
                // –í–æ–∑–≤—Ä–∞—â–∞–µ–º 404 –¥–ª—è —Å—Ç–∞—Ç–∏—á–µ—Å–∫–∏—Ö —Ñ–∞–π–ª–æ–≤
                console.log(`üö´ Returning 404 for static file: ${req.url}`);
                const requestTime = Date.now() - requestStartTime;
                logRequest(req, 404, filePath, err); // –í–û–¢ –í–´–ó–û–í!
                console.log(`‚è±Ô∏è  Request completed in ${requestTime}ms`);

                res.writeHead(404, { 'Content-Type': 'text/plain' });
                res.end('404 - –§–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω');
                return;
            }
        } else {
            console.log(`‚úÖ File exists and accessible: ${filePath}`);
        }

        // –ß–∏—Ç–∞–µ–º –∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ñ–∞–π–ª
        console.log(`üìñ Reading file: ${filePath}`);

        fs.readFile(filePath, (error, content) => {
            const requestTime = Date.now() - requestStartTime;

            if (error) {
                console.log(`‚ùå Error reading file: ${error.message}`);

                if (error.code === 'ENOENT') {
                    logRequest(req, 404, filePath, error); // –í–û–¢ –í–´–ó–û–í!
                    console.log(`‚è±Ô∏è  Request completed in ${requestTime}ms`);
                    res.writeHead(404, { 'Content-Type': 'text/plain' });
                    res.end('404 - –§–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω');
                } else {
                    logRequest(req, 500, filePath, error); // –í–û–¢ –í–´–ó–û–í!
                    console.log(`‚è±Ô∏è  Request completed in ${requestTime}ms`);
                    res.writeHead(500, { 'Content-Type': 'text/plain' });
                    res.end('500 - –í–Ω—É—Ç—Ä–µ–Ω–Ω—è—è –æ—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞');
                }
            } else {
                console.log(`‚úÖ File read successfully, content length: ${formatFileSize(content.length)}`);

                // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∑–∞–≥–æ–ª–æ–≤–∫–∏
                const headers = {
                    'Content-Type': contentType,
                    'Content-Length': content.length,
                    'Cache-Control': 'public, max-age=31536000'
                };

                // –î–ª—è HTML —Ñ–∞–π–ª–æ–≤ –æ—Ç–∫–ª—é—á–∞–µ–º –∫–µ—à–∏—Ä–æ–≤–∞–Ω–∏–µ
                if (contentType === 'text/html') {
                    headers['Cache-Control'] = 'no-cache, no-store, must-revalidate';
                    headers['Pragma'] = 'no-cache';
                    headers['Expires'] = '0';
                    console.log(`üö´ Caching disabled for HTML file`);
                } else {
                    console.log(`üíæ Caching enabled for static file (1 year)`);
                }

                console.log(`üì§ Response headers:`);
                Object.keys(headers).forEach(key => {
                    console.log(`   ${key}: ${headers[key]}`);
                });

                logRequest(req, 200, filePath, null, content.length); // –í–û–¢ –í–´–ó–û–í!
                console.log(`‚è±Ô∏è  Request completed in ${requestTime}ms`);

                res.writeHead(200, headers);
                res.end(content, 'utf-8');

                console.log(`‚úÖ Response sent successfully`);
            }
        });
    });
});

// –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—à–∏–±–æ–∫ —Å–µ—Ä–≤–µ—Ä–∞
server.on('error', (err) => {
    console.error(`\n‚ùå –ö–†–ò–¢–ò–ß–ï–°–ö–ê–Ø –û–®–ò–ë–ö–ê –°–ï–†–í–ï–†–ê [${getTimestamp()}]:`);
    console.error(`${'='.repeat(60)}`);
    console.error(`Code: ${err.code}`);
    console.error(`Message: ${err.message}`);
    console.error(`Stack: ${err.stack}`);
    console.error(`${'='.repeat(60)}\n`);
});

// –ó–∞–ø—É—Å–∫ —Å–µ—Ä–≤–µ—Ä–∞
server.listen(PORT, () => {
    const timestamp = getTimestamp();
    console.log(`\n${'üöÄ'.repeat(20)}`);
    console.log(`[${timestamp}] –°–ï–†–í–ï–† –£–°–ü–ï–®–ù–û –ó–ê–ü–£–©–ï–ù`);
    console.log(`${'üöÄ'.repeat(20)}`);
    console.log(`üåê URL: http://localhost:${PORT}`);
    console.log(`üìÅ –ü–∞–ø–∫–∏ –¥–ª—è —Ñ–∞–π–ª–æ–≤:`);
    console.log(`   üìÇ dist: ${DIST_DIR}`);
    console.log(`   üìÇ public: ${PUBLIC_DIR}`);
    console.log(`üìπ –í–∏–¥–µ–æ —Ñ–∞–π–ª—ã: –ø–æ–º–µ—Å—Ç–∏—Ç–µ –≤ –ø–∞–ø–∫—É public/`);
    console.log(`\n‚ö° –°–µ—Ä–≤–µ—Ä –≥–æ—Ç–æ–≤ –∫ –ø—Ä–∏—ë–º—É –∑–∞–ø—Ä–æ—Å–æ–≤...`);
    console.log(`${'='.repeat(60)}\n`);
});

// Graceful shutdown
process.on('SIGINT', () => {
    console.log('\nüõë –û—Å—Ç–∞–Ω–æ–≤–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞...');
    server.close(() => {
        console.log('‚úÖ –°–µ—Ä–≤–µ—Ä –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω');
        process.exit(0);
    });
});